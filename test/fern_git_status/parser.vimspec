Describe fern_git_status#parser
  Before
    let Promise = vital#fern#import('Async.Promise')
  End

  Describe #parse()
    Context With Stained
      It parses git status (--porcelain) and return a status map
        let records = [
            \ ' M worktree/modified',
            \ ' D worktree/deleted',
            \ ' R worktree/renamed1',
            \ ' C worktree/renamed2',
            \ 'M  index/modified',
            \ 'D  index/deleted',
            \ 'R  index/renamed1',
            \ 'C  index/renamed2',
            \ 'A  index/staged',
            \ 'DD unmerged',
            \ 'AU a/unmerged',
            \ 'UD a/a/unmerged',
            \ 'UA a/a/a/unmerged',
            \ 'DU a/a/a/a/unmerged',
            \ 'AA a/a/a/a/a/unmerged',
            \ 'UU a/a/a/a/a/a/unmerged',
            \ '?? untracked',
            \ '!! ignored',
            \]
        let [r, e] = Promise.wait(
              \ fern_git_status#parser#parse('root', records, 1),
              \ { 'timeout': 10 },
              \)
        Assert Equals(e, v:null)
        Assert Equals(sort(items(r)), [
              \ ['root/a', 'Stained'],
              \ ['root/a/a', 'Stained'],
              \ ['root/a/a/a', 'Stained'],
              \ ['root/a/a/a/a', 'Stained'],
              \ ['root/a/a/a/a/a', 'Stained'],
              \ ['root/a/a/a/a/a/a', 'Stained'],
              \ ['root/a/a/a/a/a/a/unmerged', 'Unmerged'],
              \ ['root/a/a/a/a/a/unmerged', 'Unmerged'],
              \ ['root/a/a/a/a/unmerged', 'Unmerged'],
              \ ['root/a/a/a/unmerged', 'Unmerged'],
              \ ['root/a/a/unmerged', 'Unmerged'],
              \ ['root/a/unmerged', 'Unmerged'],
              \ ['root/ignored', 'Ignored'],
              \ ['root/index', 'Stained'],
              \ ['root/index/deleted', 'Deleted'],
              \ ['root/index/modified', 'Staged'],
              \ ['root/index/renamed1', 'Renamed'],
              \ ['root/index/renamed2', 'Renamed'],
              \ ['root/index/staged', 'Staged'],
              \ ['root/unmerged', 'Unmerged'],
              \ ['root/untracked', 'Untracked'],
              \ ['root/worktree', 'Stained'],
              \ ['root/worktree/deleted', 'Deleted'],
              \ ['root/worktree/modified', 'Modified'],
              \ ['root/worktree/renamed1', 'Renamed'],
              \ ['root/worktree/renamed2', 'Renamed'],
              \])
      End

      It must complete entire process within 100ms for 700 items (Performance test)
        let prefix = 'a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z'
        let records = []
        call extend(records, map(range(100), { -> printf('?? %s/%s/untracked', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf('!! %s/%s/ignored', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf('DD %s/%s/unmerged', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf('M  %s/%s/staged', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf(' M %s/%s/modified', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf(' D %s/%s/deleted', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf(' R %s/%s/renamed', prefix, v:val) }))
        let start = reltime()
        let promise = fern_git_status#parser#parse('root', records, 1)
              \.then({ -> reltimefloat(reltime(start)) * 1000 })
        let [r, e] = Promise.wait(promise, { 'timeout': 1000 })
        Assert Equals(e, v:null)
        Assert True(r < 100, printf('Process time (%s ms) must be less than 100ms', r))
      End
    End

    Context Without Stained
      It parses git status (--porcelain) and return a status map
        let records = [
            \ ' M worktree/modified',
            \ ' D worktree/deleted',
            \ ' R worktree/renamed1',
            \ ' C worktree/renamed2',
            \ 'M  index/modified',
            \ 'D  index/deleted',
            \ 'R  index/renamed1',
            \ 'C  index/renamed2',
            \ 'A  index/staged',
            \ 'DD unmerged',
            \ 'AU a/unmerged',
            \ 'UD a/a/unmerged',
            \ 'UA a/a/a/unmerged',
            \ 'DU a/a/a/a/unmerged',
            \ 'AA a/a/a/a/a/unmerged',
            \ 'UU a/a/a/a/a/a/unmerged',
            \ '?? untracked',
            \ '!! ignored',
            \]
        let [r, e] = Promise.wait(
              \ fern_git_status#parser#parse('root', records, 0),
              \ { 'timeout': 10 },
              \)
        Assert Equals(e, v:null)
        Assert Equals(sort(items(r)), [
              \ ['root/a/a/a/a/a/a/unmerged', 'Unmerged'],
              \ ['root/a/a/a/a/a/unmerged', 'Unmerged'],
              \ ['root/a/a/a/a/unmerged', 'Unmerged'],
              \ ['root/a/a/a/unmerged', 'Unmerged'],
              \ ['root/a/a/unmerged', 'Unmerged'],
              \ ['root/a/unmerged', 'Unmerged'],
              \ ['root/ignored', 'Ignored'],
              \ ['root/index/deleted', 'Deleted'],
              \ ['root/index/modified', 'Staged'],
              \ ['root/index/renamed1', 'Renamed'],
              \ ['root/index/renamed2', 'Renamed'],
              \ ['root/index/staged', 'Staged'],
              \ ['root/unmerged', 'Unmerged'],
              \ ['root/untracked', 'Untracked'],
              \ ['root/worktree/deleted', 'Deleted'],
              \ ['root/worktree/modified', 'Modified'],
              \ ['root/worktree/renamed1', 'Renamed'],
              \ ['root/worktree/renamed2', 'Renamed'],
              \])
      End

      It must complete entire process within 100ms for 700 items (Performance test)
        let prefix = 'a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z'
        let records = []
        call extend(records, map(range(100), { -> printf('?? %s/%s/untracked', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf('!! %s/%s/ignored', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf('DD %s/%s/unmerged', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf('M  %s/%s/staged', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf(' M %s/%s/modified', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf(' D %s/%s/deleted', prefix, v:val) }))
        call extend(records, map(range(100), { -> printf(' R %s/%s/renamed', prefix, v:val) }))
        let start = reltime()
        let promise = fern_git_status#parser#parse('root', records, 0)
              \.then({ -> reltimefloat(reltime(start)) * 1000 })
        let [r, e] = Promise.wait(promise, { 'timeout': 1000 })
        Assert Equals(e, v:null)
        Assert True(r < 100, printf('Process time (%s ms) must be less than 100ms', r))
      End
    End
  End
End
